■ 역사
 - 1969년 처음 프로그래밍을 시작
 - 1972년 정식(full-time) 프로그래머가 됨.
 - 결함 있는 디자인->코딩->패치 를 반복하며 나름 '유능한' 프로그래머로 성장 및 고속 승진
 - 1975년 Structured Programming 학파(Dijkstra, Wirth, Hoarse, Dahl)를 알게 된 후
    ☞ '훌륭한 프로그래머'라는 자신감은 산산 조각남.
    ☞ 프로그래밍의 올바른 방법에 대한 고민을 시작함.
    ☞ 거인들의 모든 저서를 섭렵함.
    ☞ assembly를 사용하고 goto를 이용한 프로그램에 대한 자괴감이 듬. 
 - 1976년 (첫번째 깨달음) 
    ☞ Structured Programming은 언어와는 무관함.
    ☞ 어셈블리 언어로도 충분히 아름답게 프로그래밍이 가능함.

■ 어셈블러 작성 프로젝트에 첫번째 깨달음의 결과를 적용해 보기로 함.
  - 다음과 같은 코드 작성 원리를 만듦.
    1. 코드는 '함수'로 구분함.
    2. 함수는 '20 줄' 이내로 작성함.
    3. 함수는 전역 변수 상태에 의존하지 않고 오직 매개변수에만 의존함.
    4. 모든 함수를 '제너럴 함수'와 '앱 전용 함수'로 구분 함. 
      (제너럴 함수란 다른 앱에서도 사용 가능한 함수를 뜻함)
    5. 가능한 한 제너럴 함수로 작성함.   
    6. 모든 함수는 문서화 함.
    7. 전역 변수에 대해서는 개별 변수의 의미(semantic)와 전역 불변성(global invariant) 모두 문서화.
  - 적용 결과는 놀라움. 
    ☞ 심각한 버그가 없음.
    ☞ 95%의 제너럴 코드가 나옴.
    ☞ 향후 요구사항등이 바뀌어도 제너럴 함수는 영향을 받지 않음
       (제너럴 알고리즘과 자료구조를 이용해 작성한 프로그램은 강건(robust)해 짐) 

■ '제너럴' 의 의미. 
  - 결과가 매우 성공적이었고 자랑스러웠으나 
    '제너럴'의 진정한 의미에 대해서는 깨닫지 못함.
    이후 30년간의 연구는 이 '제너럴'의 의미를 찾는 여정이었다고 요약할 수 있음.  
  - 결과를 보고도 깨닫지 못하고 있었던 사실들
    ☞ 제너럴 함수는 다른 프로그래머(미래의 자신도 포함)에 의해 사용될 수 있음.
    ☞ 가장 중요한 부분은 인터페이스를 '제너럴'하게 만드는 것임.
  - 애플리케이션의 크기가 커질수록 제너럴 코드의 비율이 높아짐. 
    ☞ 대부분의 데스크탑 애플리케이션의 경우 비-제너럴 코드 비중은 1% 미만이어야 함.
   
■ 1976년 10월 (두번째 깨달음)
   - 병원에 입원해서 reconfigurable paralle architectures 관련 입사 준비를 하던 중에 깨달음
   - 병행 진행을 인한 재구조화 가능 여부는 연산들에 대한 대수적 특성에 의해 좌우됨
   - ex) a + (b + (c + d))) ==> (a + b) + (c + d) 의 변환이 가능한 이유는
        덧셈 연산이 "결합 법칙"을 만족하기 때문임. 
